<?php

namespace Src\domain\%PascalCase%\Repositories;

use Doctrine\ORM\EntityRepository;
use Src\domain\%PascalCase%\Contracts\%PascalCase%RepositoryInterface;
use Src\domain\%PascalCase%\Entities\%PascalCase%;
use Src\infrastructure\Doctrine\Src\EntityManagerCreator;

class ORM%PascalCase%Repository extends EntityRepository implements %PascalCase%RepositoryInterface
{

    public function __construct()
    {
        $entityManager = EntityManagerCreator::createEntityManager();
        parent::__construct($entityManager, $entityManager->getClassMetadata(%PascalCase%::class));
    }

    public function create(%PascalCase% $%camelCase%): %PascalCase%
    {
        return $this->persist($%camelCase%);
    }

    public function update(%PascalCase% $%camelCase%): %PascalCase%
    {
        return $this->persist($%camelCase%);
    }

    public function getById(int $id): ?%PascalCase%
    {
        $%camelCase% = $this->find($id);

        if(empty($%camelCase%)){
            return null;
        }

        return $%camelCase%;
    }

    /**
     * @return %PascalCase%[]
     * @throws \Exception
     */
    public function getAll(array $filters): array
    {
        return $this->findAll();
    }

    /**
     * @throws \Exception
     */
    public function deleteById(int $id): void
    {
        $entity = $this->getById($id);

        if(empty($entity)){
            throw new \Exception("%PascalCase% not found");
        }

        $this->getEntityManager()->remove($entity);
        $this->getEntityManager()->flush();
    }

    private function persist(%PascalCase% $%camelCase%): %PascalCase%
    {
        $this->getEntityManager()->persist($%camelCase%);
        $this->getEntityManager()->flush();
        return $%camelCase%;
    }
}


