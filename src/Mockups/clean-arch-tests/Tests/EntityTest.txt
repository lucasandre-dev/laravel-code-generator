<?php

namespace %PascalCase%;

use Domain\%EntityNamespace%\Actions\Delete%PascalCase%Action;
use Domain\%EntityNamespace%\Actions\GetAll%PascalCase%sAction;
use Domain\%EntityNamespace%\Actions\Get%PascalCase%ByIdAction;
use Domain\%EntityNamespace%\Actions\Update%PascalCase%Action;
use Domain\%EntityNamespace%\DTO\Delete%PascalCase%InputDto;
use Domain\%EntityNamespace%\DTO\GetAll%PascalCase%sInputDto;
use Domain\%EntityNamespace%\DTO\Get%PascalCase%ByIdInputDto;
use Domain\%EntityNamespace%\DTO\Update%PascalCase%InputDto;
use Domain\%EntityNamespace%\Repositories\%PascalCase%Repository;
use Tests\TestCase;
use Domain\_Shared\Transaction\TransactionFake;
use Domain\%EntityNamespace%\Actions\Create%PascalCase%Action;
use Domain\%EntityNamespace%\DTO\Create%PascalCase%InputDto;
use Tests\Traits\RefreshDatabaseMysql;

class %PascalCase%Test extends TestCase
{
    use RefreshDatabaseMysql;

    public function test_create_%camelCase%()
    {
        $input = new Create%PascalCase%InputDto(
        );

        $action = new Create%PascalCase%Action(new %PascalCase%Repository(), new TransactionFake());
        $output = $action->execute($input);

        $this->assertSame($input->, $output->);
    }

    public function test_update_%camelCase%()
    {
        $mock = $this->create%PascalCase%Mock();

        $input = new Update%PascalCase%InputDto(
            $mock->id,
        );

        $action = new Update%PascalCase%Action(new %PascalCase%Repository(), new TransactionFake());
        $output = $action->execute($input);

        $this->assertSame($input->id, $output->id);
    }

    public function test_get_%camelCase%_by_id()
    {
        $mock = $this->create%PascalCase%Mock();

        $action = new Get%PascalCase%ByIdAction(new %PascalCase%Repository());
        $output = $action->execute(new Get%PascalCase%ByIdInputDto($mock->id));

        $this->assertSame($mock->id, $output->id);
    }

    public function test_delete_%camelCase%_by_id()
    {
        $mock = $this->create%PascalCase%Mock();

        $input = new Delete%PascalCase%InputDto($mock->id);

        $action = new Delete%PascalCase%Action(new %PascalCase%Repository(), new TransactionFake());
        $action->execute($input);

        $action = new Get%PascalCase%ByIdAction(new %PascalCase%Repository());
        $output = $action->execute(new Get%PascalCase%ByIdInputDto($mock->id));

        $this->assertNull($output);
    }

    public function test_get_all_%camelCase%s()
    {
        $mock = $this->create%PascalCase%Mock();

        $input = new GetAll%PascalCase%sInputDto([]);

        $action = new GetAll%PascalCase%sAction(new %PascalCase%Repository());
        $output = $action->execute($input);

        $this->assertCount(1, $output);
        $this->assertSame($mock->id, $output[0]->id);
    }

    public function create%PascalCase%Mock()
    {
        $input = new Create%PascalCase%InputDto(
        );

        $action = new Create%PascalCase%Action(new %PascalCase%Repository(), new TransactionFake());
        return $action->execute($input);
    }
}
