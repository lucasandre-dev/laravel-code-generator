<?php

namespace Domain\%EntityNamespace%\Actions;

use Domain\%PascalCase%\Contracts\%PascalCase%RepositoryInterface;
use Domain\%PascalCase%\DTO\GetAll%PascalCase%sInputDto;
use Domain\%PascalCase%\DTO\%PascalCase%OutputDto;
use Domain\%PascalCase%\Contracts\%PascalCase%MapperInterface;

final class GetAll%PascalCase%sAction
{
    public function __construct(
        private %PascalCase%RepositoryInterface $%camelCase%Repository,
        private %PascalCase%MapperInterface $mapper
    )
    { }

    /**
     * @param GetAll%PascalCase%sInputDto $inputDto
     * @return %PascalCase%OutputDto[]
     */
    public function execute(GetAll%PascalCase%sInputDto $inputDto): array
    {
        $%camelCase%s = $this->%camelCase%Repository->getAll($inputDto->filters);

        $%camelCase%sOutput = [];
        foreach ($%camelCase%s as $%camelCase%) {
            $%camelCase%sOutput[] = $this->mapper->map($%camelCase%);
        }

        return $%camelCase%sOutput;
    }
}
